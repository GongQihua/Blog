<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>生成在线URL</title>
    <url>/Blog/2024/02/27/picture-URL/</url>
    <content><![CDATA[<h1 id="本地图片生成在线URL"><a href="#本地图片生成在线URL" class="headerlink" title="本地图片生成在线URL"></a>本地图片生成在线URL</h1><p>方法就是用图床，找个在线图床网站，上传图片<span id="more"></span></p>
<p>可用网址：<a href="https://sm.ms/">https://sm.ms/</a></p>
<p>注册，上传图片，把网站给的Image URL复制下来就行</p>
<h1 id="PDF生成-URL"><a href="#PDF生成-URL" class="headerlink" title="PDF生成 URL"></a>PDF生成 URL</h1><p>方法类似，找个pdf url工具，上传，生成</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>URL</tag>
      </tags>
  </entry>
  <entry>
    <title>系统代理设置</title>
    <url>/Blog/2024/02/27/proxy-setting/</url>
    <content><![CDATA[<h1 id="系统代理设置"><a href="#系统代理设置" class="headerlink" title="系统代理设置"></a>系统代理设置</h1><p>在git同步的时候，不是连不上github,就是连接超时，贼不习惯。</p>
<p>网上搜了一圈乱七八糟的解决方案，很多都是要改源文件的，感觉根本不用那么麻烦就自己摸索了一下，简便的设置方法<span id="more"></span></p>
<p>首先，代理设置全局(global)，全局，全局，重要的事说三遍。因为这基本解决了win上的git问题，但也有例外。</p>
<p>首先，修改git的proxy和修改terminal的proxy不一样，分情况说：</p>
<h2 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h2><h3 id="cmd-powershell修改proxy："><a href="#cmd-powershell修改proxy：" class="headerlink" title="cmd, powershell修改proxy："></a>cmd, powershell修改proxy：</h3><p>cmd：打开输入set http_proxy&#x3D;<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a> 和 set https_proxy&#x3D;<a href="http://127.0.0.1:7890，7890是你的代理端口（proxy">http://127.0.0.1:7890，7890是你的代理端口（proxy</a> port），自己替换。</p>
<p>Powershell：输入 $Env:http_proxy&#x3D;”<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a>“ 和 $Env:https_proxy&#x3D;”<a href="http://127.0.0.1:7890"，代理端口同上。">http://127.0.0.1:7890&quot;，代理端口同上。</a></p>
<p>clashX有一键复制，点port后的那个命令行小按键。但是是一次性的，每次重开窗口都要再打一遍，但我觉得比改源文件好，因为会影响电脑正常使用，还要去改回来。</p>
<h3 id="Vscode-JetBrains"><a href="#Vscode-JetBrains" class="headerlink" title="Vscode &amp; JetBrains"></a>Vscode &amp; JetBrains</h3><p>设置CMD和prompt没用，vscode里打开终端设置也没用，但是有个更便捷的方法：</p>
<p>文件-首选项-设置-应用程序-代理服务器-proxy，代理地址打进去。</p>
<p>JetBrains基本跟vs一样，找http proxy设置，往里一输就完了。</p>
<h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><p>首先还是全局，但mac是伪全局。</p>
<h3 id="终端："><a href="#终端：" class="headerlink" title="终端："></a>终端：</h3><p>猫猫头右键，有个终端代理模式（之类的)</p>
<p>输入terminal： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</span><br></pre></td></tr></table></figure>

<p>设置完了，什么brew，nvm，npm全能跑，不香吗。</p>
<p>其他代理：同win cmd的方法，务必开全局，然后复制终端代理的代码。</p>
<h2 id="直接修改git-proxy："><a href="#直接修改git-proxy：" class="headerlink" title="直接修改git proxy："></a>直接修改git proxy：</h2><p>各系统通用，但仅仅让git跑起来，例如mac上的brew，conda之类的，如果被墙了照样没用</p>
<p>终端输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br><span class="line">git config --global https.proxy https://127.0.0.1:7890</span><br></pre></td></tr></table></figure>

<p>（ps：实在不行，github desktop解决一切问题，代理不开全局都能活）</p>
]]></content>
      <categories>
        <category>Setup</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity，启动!</title>
    <url>/Blog/2024/03/06/unity-begin/</url>
    <content><![CDATA[<h1 id="Unity，启动！"><a href="#Unity，启动！" class="headerlink" title="Unity，启动！"></a>Unity，启动！</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>万事开头难，中间难，结尾难</p>
<p>世上无难事，只要肯放弃</p>
</blockquote>
<p>本篇记录unity入门和常用资源内容链接</p>
<p>官方教程内容是最好的内容！<span id="more"></span></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li><p>C# 环境配置</p>
<p>win专属：visual studio一步到位，选C# 桌面应用，unity扩展这两项即可。</p>
<p>或者：</p>
<p>下载dotnet（官网或者brew），vscode扩展，rider。</p>
<p>mac要多下一个mono框架</p>
</li>
<li><p>unity配置</p>
<p>官网下载unity hub，hub安装选择unity版本</p>
<p>建议不要默认，进去自选，最小安装，以后可以加配（加了不能删，什么鬼啊！）</p>
<p>设置unity使用的编辑器，默认win和mac都是vs（mac的vs都快GG了）</p>
<p>编辑器的unity好用插件，按需求来</p>
</li>
</ol>
<h2 id="官方资源"><a href="#官方资源" class="headerlink" title="官方资源"></a>官方资源</h2><p>建议看英语，并不是中文不好看，而是中文文档是机翻！有些甚至不翻！（都有GPT了，有没有搞错啊）</p>
<p>官网：<a href="https://unity.com/">https://unity.com</a></p>
<p>文档：<a href="https://docs.unity.com/">https://docs.unity.com</a></p>
<p>Unity Learn：<a href="https://learn.unity.com/">https://learn.unity.com</a></p>
<p>Assert Store：<a href="https://assetstore.unity.com/">https://assetstore.unity.com</a></p>
<blockquote>
<p>先在assert store里import，然后hub创建空项目，package manager导入</p>
</blockquote>
<h2 id="软件界面"><a href="#软件界面" class="headerlink" title="软件界面"></a>软件界面</h2><p>软件界面各个按键是操作的基本，看官方文档吧</p>
<p>顺便b站和github都有教程，边做边熟悉，关键是一些画面快速操作的快捷键</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>U3D</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人博客</title>
    <url>/Blog/2024/02/27/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="个人博客搭建指北"><a href="#个人博客搭建指北" class="headerlink" title="个人博客搭建指北"></a>个人博客搭建指北</h1><p>搭建个人静态博客，Hexo+Next+Github Pages。</p>
<p>平台：macos</p>
<p>本地：nvm，JS一套，Hexo，Next主题</p>
<p>网站：免费github pages，或自己搞个云服务<span id="more"></span></p>
<h1 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h1><ol>
<li><p>Xcode开发工具，带有一些基础环境和git</p>
</li>
<li><p>安装本地NodeJS</p>
<ol>
<li><p>这一步有坑，不要brew安装或者官网的sdk安装，会报错。在安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，这里不要看网上的建议，<strong>不要</strong> 使用 root、sudo 等方法覆盖权限。会报更大的错！</p>
</li>
<li><p>使用nvm或者nvs部署，这里用的是nvm。</p>
<p>链接：<a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p>
<p>terminal命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh</span><br></pre></td></tr></table></figure>

<p>下完验证一下</p>
<p><code>nvm -v</code></p>
<p>如果没有，去配一下环境，别看网上一堆，要找mac zsh添加环境</p>
</li>
<li><p>nvm安装node和npm</p>
<p><code>nvm install node</code> 可以指定版本，看一下nvm help</p>
<p>装完验证一下，不行加环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>安装Hexo</p>
<p>精简版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>也可以用完整版安装指令，装完验证，要指定版本的话记得看一下版本对应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>建站，创立项目文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>可以自定义路径，现在文件夹在主目录下，可以查看</p>
</li>
<li><p>在文件夹安装Next主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>大功告成</p>
</li>
</ol>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>没有什么，是比官方文档更好使的教程！</p>
<p>中文：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a> 英语：<a href="https://hexo.io/docs/index.html">https://hexo.io/docs/index.html</a></p>
<p>创建文章，编辑source下的markdown文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>服务器预览</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>发布</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="部署github"><a href="#部署github" class="headerlink" title="部署github"></a>部署github</h2><ol>
<li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主config.yml配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成站点文件并推送至远程库。执行 <code>hexo clean &amp;&amp; hexo deploy</code>。注意，如果是从站，config里把前面的网站URL设置一下</p>
</li>
</ol>
<p><em><strong>GitHub Pages 源存储库的建议限制为1 GB。 有关详细信息，请参阅“关于GitHub 上的大文件” 发布的GitHub Pages 站点不得超过1 GB。 如果花费的时间超过10 分钟，GitHub Pages 部署将超时。</strong></em></p>
<p><em><strong>个人主页只能创建一个，项目主页可以创建多个</strong></em></p>
<h1 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h1><p>同给出官方文档链接：</p>
<p><a href="https://theme-next.iissnan.com/">https://theme-next.iissnan.com/</a></p>
<p>似乎是旧版的，新版的我只找到更新日志，但是旧版大多通用</p>
<p><a href="https://theme-next.org/index.html">https://theme-next.org/index.html</a></p>
<p>在config里的修改theme，即可启用主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>剩下的自定义功能还是去看官方文档吧</p>
<hr>
<p>（ps: 第一次用typora写完一个文档，感觉好难用啊，有些本来要用上的html语法都识别不出来，:(，还有格式问题，不如直接vscode编辑，大呼上当)</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
